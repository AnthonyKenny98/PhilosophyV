// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointOnSegment (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_x,
        p_y,
        p_z,
        e_p1_x,
        e_p1_y,
        e_p1_z,
        e_p2_x,
        e_p2_y,
        e_p2_z,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] p_x;
input  [31:0] p_y;
input  [31:0] p_z;
input  [31:0] e_p1_x;
input  [31:0] e_p1_y;
input  [31:0] e_p1_z;
input  [31:0] e_p2_x;
input  [31:0] e_p2_y;
input  [31:0] e_p2_z;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] p_a_fu_210_p3;
reg   [31:0] p_a_reg_914;
wire    ap_CS_fsm_state2;
wire   [31:0] p_a_1_fu_222_p3;
reg   [31:0] p_a_1_reg_920;
wire   [31:0] p_a_2_fu_310_p3;
reg   [31:0] p_a_2_reg_926;
wire   [31:0] p_a_3_fu_322_p3;
reg   [31:0] p_a_3_reg_932;
wire   [31:0] p_a_4_fu_410_p3;
reg   [31:0] p_a_4_reg_938;
wire   [31:0] p_a_5_fu_422_p3;
reg   [31:0] p_a_5_reg_944;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln49_4_fu_463_p2;
reg   [0:0] icmp_ln49_4_reg_968;
wire   [0:0] icmp_ln49_5_fu_469_p2;
reg   [0:0] icmp_ln49_5_reg_973;
wire   [0:0] or_ln49_3_fu_487_p2;
reg   [0:0] or_ln49_3_reg_978;
wire   [0:0] icmp_ln49_8_fu_510_p2;
reg   [0:0] icmp_ln49_8_reg_984;
wire   [0:0] icmp_ln49_9_fu_516_p2;
reg   [0:0] icmp_ln49_9_reg_989;
wire   [0:0] icmp_ln50_4_fu_557_p2;
reg   [0:0] icmp_ln50_4_reg_994;
wire   [0:0] icmp_ln50_5_fu_563_p2;
reg   [0:0] icmp_ln50_5_reg_999;
wire   [0:0] or_ln50_3_fu_581_p2;
reg   [0:0] or_ln50_3_reg_1004;
wire   [0:0] icmp_ln51_4_fu_622_p2;
reg   [0:0] icmp_ln51_4_reg_1010;
wire   [0:0] icmp_ln51_5_fu_628_p2;
reg   [0:0] icmp_ln51_5_reg_1015;
wire   [0:0] or_ln51_3_fu_646_p2;
reg   [0:0] or_ln51_3_reg_1020;
wire   [0:0] icmp_ln51_8_fu_669_p2;
reg   [0:0] icmp_ln51_8_reg_1026;
wire   [0:0] icmp_ln51_9_fu_675_p2;
reg   [0:0] icmp_ln51_9_reg_1031;
wire   [0:0] icmp_ln51_10_fu_698_p2;
reg   [0:0] icmp_ln51_10_reg_1036;
wire   [0:0] icmp_ln51_11_fu_704_p2;
reg   [0:0] icmp_ln51_11_reg_1041;
reg   [31:0] grp_fu_86_p0;
reg   [31:0] grp_fu_86_p1;
reg   [31:0] grp_fu_92_p0;
reg   [31:0] grp_fu_92_p1;
reg   [31:0] grp_fu_98_p0;
reg   [31:0] grp_fu_98_p1;
reg   [31:0] grp_fu_104_p0;
reg   [31:0] grp_fu_104_p1;
reg   [31:0] grp_fu_110_p0;
reg   [31:0] grp_fu_110_p1;
reg   [31:0] grp_fu_116_p0;
reg   [31:0] grp_fu_116_p1;
wire   [31:0] bitcast_ln49_fu_128_p1;
wire   [31:0] bitcast_ln49_1_fu_145_p1;
wire   [7:0] tmp_fu_131_p4;
wire   [22:0] trunc_ln49_fu_141_p1;
wire   [0:0] icmp_ln49_1_fu_168_p2;
wire   [0:0] icmp_ln49_fu_162_p2;
wire   [7:0] tmp_1_fu_148_p4;
wire   [22:0] trunc_ln49_1_fu_158_p1;
wire   [0:0] icmp_ln49_3_fu_186_p2;
wire   [0:0] icmp_ln49_2_fu_180_p2;
wire   [0:0] or_ln49_fu_174_p2;
wire   [0:0] or_ln49_1_fu_192_p2;
wire   [0:0] and_ln49_fu_198_p2;
wire   [0:0] grp_fu_86_p2;
wire   [0:0] and_ln49_1_fu_204_p2;
wire   [0:0] grp_fu_92_p2;
wire   [0:0] and_ln49_4_fu_216_p2;
wire   [31:0] bitcast_ln50_fu_228_p1;
wire   [31:0] bitcast_ln50_1_fu_245_p1;
wire   [7:0] tmp_6_fu_231_p4;
wire   [22:0] trunc_ln50_fu_241_p1;
wire   [0:0] icmp_ln50_1_fu_268_p2;
wire   [0:0] icmp_ln50_fu_262_p2;
wire   [7:0] tmp_7_fu_248_p4;
wire   [22:0] trunc_ln50_1_fu_258_p1;
wire   [0:0] icmp_ln50_3_fu_286_p2;
wire   [0:0] icmp_ln50_2_fu_280_p2;
wire   [0:0] or_ln50_fu_274_p2;
wire   [0:0] or_ln50_1_fu_292_p2;
wire   [0:0] and_ln50_fu_298_p2;
wire   [0:0] grp_fu_98_p2;
wire   [0:0] and_ln50_1_fu_304_p2;
wire   [0:0] grp_fu_104_p2;
wire   [0:0] and_ln50_4_fu_316_p2;
wire   [31:0] bitcast_ln51_fu_328_p1;
wire   [31:0] bitcast_ln51_1_fu_345_p1;
wire   [7:0] tmp_15_fu_331_p4;
wire   [22:0] trunc_ln51_fu_341_p1;
wire   [0:0] icmp_ln51_1_fu_368_p2;
wire   [0:0] icmp_ln51_fu_362_p2;
wire   [7:0] tmp_16_fu_348_p4;
wire   [22:0] trunc_ln51_1_fu_358_p1;
wire   [0:0] icmp_ln51_3_fu_386_p2;
wire   [0:0] icmp_ln51_2_fu_380_p2;
wire   [0:0] or_ln51_fu_374_p2;
wire   [0:0] or_ln51_1_fu_392_p2;
wire   [0:0] and_ln51_fu_398_p2;
wire   [0:0] grp_fu_110_p2;
wire   [0:0] and_ln51_1_fu_404_p2;
wire   [0:0] grp_fu_116_p2;
wire   [0:0] and_ln51_2_fu_416_p2;
wire   [31:0] bitcast_ln49_2_fu_428_p1;
wire   [31:0] bitcast_ln49_3_fu_445_p1;
wire   [7:0] tmp_3_fu_431_p4;
wire   [22:0] trunc_ln49_2_fu_441_p1;
wire   [7:0] tmp_4_fu_449_p4;
wire   [22:0] trunc_ln49_3_fu_459_p1;
wire   [0:0] icmp_ln49_7_fu_481_p2;
wire   [0:0] icmp_ln49_6_fu_475_p2;
wire   [31:0] bitcast_ln49_4_fu_493_p1;
wire   [7:0] tmp_9_fu_496_p4;
wire   [22:0] trunc_ln49_4_fu_506_p1;
wire   [31:0] bitcast_ln50_2_fu_522_p1;
wire   [31:0] bitcast_ln50_3_fu_539_p1;
wire   [7:0] tmp_11_fu_525_p4;
wire   [22:0] trunc_ln50_2_fu_535_p1;
wire   [7:0] tmp_12_fu_543_p4;
wire   [22:0] trunc_ln50_3_fu_553_p1;
wire   [0:0] icmp_ln50_7_fu_575_p2;
wire   [0:0] icmp_ln50_6_fu_569_p2;
wire   [31:0] bitcast_ln51_2_fu_587_p1;
wire   [31:0] bitcast_ln51_3_fu_604_p1;
wire   [7:0] tmp_19_fu_590_p4;
wire   [22:0] trunc_ln51_2_fu_600_p1;
wire   [7:0] tmp_20_fu_608_p4;
wire   [22:0] trunc_ln51_3_fu_618_p1;
wire   [0:0] icmp_ln51_7_fu_640_p2;
wire   [0:0] icmp_ln51_6_fu_634_p2;
wire   [31:0] bitcast_ln51_4_fu_652_p1;
wire   [7:0] tmp_22_fu_655_p4;
wire   [22:0] trunc_ln51_4_fu_665_p1;
wire   [31:0] bitcast_ln51_5_fu_681_p1;
wire   [7:0] tmp_24_fu_684_p4;
wire   [22:0] trunc_ln51_5_fu_694_p1;
wire    ap_CS_fsm_state4;
wire   [0:0] or_ln49_2_fu_710_p2;
wire   [0:0] and_ln49_2_fu_714_p2;
wire   [0:0] or_ln49_4_fu_725_p2;
wire   [0:0] and_ln49_5_fu_729_p2;
wire   [0:0] or_ln50_2_fu_740_p2;
wire   [0:0] and_ln50_2_fu_744_p2;
wire   [0:0] and_ln50_3_fu_749_p2;
wire   [0:0] or_ln51_2_fu_761_p2;
wire   [0:0] and_ln51_3_fu_765_p2;
wire   [0:0] and_ln49_3_fu_719_p2;
wire   [0:0] and_ln49_6_fu_734_p2;
wire   [0:0] and_ln49_7_fu_776_p2;
wire   [0:0] xor_ln49_fu_782_p2;
wire   [0:0] xor_ln50_fu_755_p2;
wire   [0:0] or_ln51_4_fu_800_p2;
wire   [0:0] and_ln51_5_fu_804_p2;
wire   [0:0] and_ln51_4_fu_770_p2;
wire   [0:0] or_ln51_5_fu_821_p2;
wire   [0:0] and_ln51_8_fu_825_p2;
wire   [0:0] and_ln51_6_fu_809_p2;
wire   [0:0] and_ln51_9_fu_830_p2;
wire   [0:0] or_ln50_5_fu_794_p2;
wire   [0:0] and_ln51_10_fu_836_p2;
wire   [0:0] or_ln51_6_fu_842_p2;
wire   [0:0] or_ln50_4_fu_788_p2;
wire   [0:0] and_ln51_11_fu_848_p2;
wire   [0:0] and_ln51_7_fu_815_p2;
reg   [4:0] grp_fu_86_opcode;
reg   [4:0] grp_fu_92_opcode;
reg   [4:0] grp_fu_98_opcode;
reg   [4:0] grp_fu_104_opcode;
reg   [4:0] grp_fu_110_opcode;
reg   [4:0] grp_fu_116_opcode;
wire   [0:0] and_ln51_12_fu_854_p2;
reg   [0:0] ap_return_preg;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_return_preg = 1'd0;
end

honeybee_fcmp_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_86_p0),
    .din1(grp_fu_86_p1),
    .ce(1'b1),
    .opcode(grp_fu_86_opcode),
    .dout(grp_fu_86_p2)
);

honeybee_fcmp_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_92_p0),
    .din1(grp_fu_92_p1),
    .ce(1'b1),
    .opcode(grp_fu_92_opcode),
    .dout(grp_fu_92_p2)
);

honeybee_fcmp_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nbkb_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_98_p0),
    .din1(grp_fu_98_p1),
    .ce(1'b1),
    .opcode(grp_fu_98_opcode),
    .dout(grp_fu_98_p2)
);

honeybee_fcmp_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nbkb_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_104_p0),
    .din1(grp_fu_104_p1),
    .ce(1'b1),
    .opcode(grp_fu_104_opcode),
    .dout(grp_fu_104_p2)
);

honeybee_fcmp_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nbkb_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_110_p0),
    .din1(grp_fu_110_p1),
    .ce(1'b1),
    .opcode(grp_fu_110_opcode),
    .dout(grp_fu_110_p2)
);

honeybee_fcmp_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
honeybee_fcmp_32nbkb_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_116_p0),
    .din1(grp_fu_116_p1),
    .ce(1'b1),
    .opcode(grp_fu_116_opcode),
    .dout(grp_fu_116_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_preg <= and_ln51_12_fu_854_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln49_4_reg_968 <= icmp_ln49_4_fu_463_p2;
        icmp_ln49_5_reg_973 <= icmp_ln49_5_fu_469_p2;
        icmp_ln49_8_reg_984 <= icmp_ln49_8_fu_510_p2;
        icmp_ln49_9_reg_989 <= icmp_ln49_9_fu_516_p2;
        icmp_ln50_4_reg_994 <= icmp_ln50_4_fu_557_p2;
        icmp_ln50_5_reg_999 <= icmp_ln50_5_fu_563_p2;
        icmp_ln51_10_reg_1036 <= icmp_ln51_10_fu_698_p2;
        icmp_ln51_11_reg_1041 <= icmp_ln51_11_fu_704_p2;
        icmp_ln51_4_reg_1010 <= icmp_ln51_4_fu_622_p2;
        icmp_ln51_5_reg_1015 <= icmp_ln51_5_fu_628_p2;
        icmp_ln51_8_reg_1026 <= icmp_ln51_8_fu_669_p2;
        icmp_ln51_9_reg_1031 <= icmp_ln51_9_fu_675_p2;
        or_ln49_3_reg_978 <= or_ln49_3_fu_487_p2;
        or_ln50_3_reg_1004 <= or_ln50_3_fu_581_p2;
        or_ln51_3_reg_1020 <= or_ln51_3_fu_646_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_a_1_reg_920 <= p_a_1_fu_222_p3;
        p_a_2_reg_926 <= p_a_2_fu_310_p3;
        p_a_3_reg_932 <= p_a_3_fu_322_p3;
        p_a_4_reg_938 <= p_a_4_fu_410_p3;
        p_a_5_reg_944 <= p_a_5_fu_422_p3;
        p_a_reg_914 <= p_a_fu_210_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return = and_ln51_12_fu_854_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_104_opcode = 5'd3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_104_opcode = 5'd2;
    end else begin
        grp_fu_104_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_104_p0 = p_a_5_reg_944;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_104_p0 = e_p1_y;
    end else begin
        grp_fu_104_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_104_p1 = p_z;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_104_p1 = e_p2_y;
    end else begin
        grp_fu_104_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_110_opcode = 5'd5;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_110_opcode = 5'd4;
    end else begin
        grp_fu_110_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_110_p0 = p_a_4_reg_938;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_110_p0 = e_p1_z;
    end else begin
        grp_fu_110_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_110_p1 = p_z;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_110_p1 = e_p2_z;
    end else begin
        grp_fu_110_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_116_opcode = 5'd3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_116_opcode = 5'd2;
    end else begin
        grp_fu_116_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_116_p0 = p_a_3_reg_932;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_116_p0 = e_p1_z;
    end else begin
        grp_fu_116_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_116_p1 = p_y;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_116_p1 = e_p2_z;
    end else begin
        grp_fu_116_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_86_opcode = 5'd5;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_86_opcode = 5'd4;
    end else begin
        grp_fu_86_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_86_p0 = p_a_reg_914;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_86_p0 = e_p1_x;
    end else begin
        grp_fu_86_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_86_p1 = p_x;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_86_p1 = e_p2_x;
    end else begin
        grp_fu_86_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_92_opcode = 5'd3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_92_opcode = 5'd2;
    end else begin
        grp_fu_92_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_92_p0 = p_a_1_reg_920;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_92_p0 = e_p1_x;
    end else begin
        grp_fu_92_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_92_p1 = p_x;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_92_p1 = e_p2_x;
    end else begin
        grp_fu_92_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_98_opcode = 5'd5;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_98_opcode = 5'd4;
    end else begin
        grp_fu_98_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_98_p0 = p_a_2_reg_926;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_98_p0 = e_p1_y;
    end else begin
        grp_fu_98_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_98_p1 = p_y;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_98_p1 = e_p2_y;
    end else begin
        grp_fu_98_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln49_1_fu_204_p2 = (grp_fu_86_p2 & and_ln49_fu_198_p2);

assign and_ln49_2_fu_714_p2 = (or_ln49_3_reg_978 & or_ln49_2_fu_710_p2);

assign and_ln49_3_fu_719_p2 = (grp_fu_86_p2 & and_ln49_2_fu_714_p2);

assign and_ln49_4_fu_216_p2 = (grp_fu_92_p2 & and_ln49_fu_198_p2);

assign and_ln49_5_fu_729_p2 = (or_ln49_4_fu_725_p2 & or_ln49_3_reg_978);

assign and_ln49_6_fu_734_p2 = (grp_fu_92_p2 & and_ln49_5_fu_729_p2);

assign and_ln49_7_fu_776_p2 = (and_ln49_6_fu_734_p2 & and_ln49_3_fu_719_p2);

assign and_ln49_fu_198_p2 = (or_ln49_fu_174_p2 & or_ln49_1_fu_192_p2);

assign and_ln50_1_fu_304_p2 = (grp_fu_98_p2 & and_ln50_fu_298_p2);

assign and_ln50_2_fu_744_p2 = (or_ln50_3_reg_1004 & or_ln50_2_fu_740_p2);

assign and_ln50_3_fu_749_p2 = (grp_fu_98_p2 & and_ln50_2_fu_744_p2);

assign and_ln50_4_fu_316_p2 = (grp_fu_104_p2 & and_ln50_fu_298_p2);

assign and_ln50_fu_298_p2 = (or_ln50_fu_274_p2 & or_ln50_1_fu_292_p2);

assign and_ln51_10_fu_836_p2 = (and_ln51_9_fu_830_p2 & and_ln51_6_fu_809_p2);

assign and_ln51_11_fu_848_p2 = (or_ln51_6_fu_842_p2 & or_ln50_4_fu_788_p2);

assign and_ln51_12_fu_854_p2 = (and_ln51_7_fu_815_p2 & and_ln51_11_fu_848_p2);

assign and_ln51_1_fu_404_p2 = (grp_fu_110_p2 & and_ln51_fu_398_p2);

assign and_ln51_2_fu_416_p2 = (grp_fu_116_p2 & and_ln51_fu_398_p2);

assign and_ln51_3_fu_765_p2 = (or_ln51_3_reg_1020 & or_ln51_2_fu_761_p2);

assign and_ln51_4_fu_770_p2 = (grp_fu_104_p2 & and_ln51_3_fu_765_p2);

assign and_ln51_5_fu_804_p2 = (or_ln51_4_fu_800_p2 & or_ln51_3_reg_1020);

assign and_ln51_6_fu_809_p2 = (grp_fu_110_p2 & and_ln51_5_fu_804_p2);

assign and_ln51_7_fu_815_p2 = (and_ln51_4_fu_770_p2 & and_ln49_7_fu_776_p2);

assign and_ln51_8_fu_825_p2 = (or_ln51_5_fu_821_p2 & or_ln50_3_reg_1004);

assign and_ln51_9_fu_830_p2 = (grp_fu_116_p2 & and_ln51_8_fu_825_p2);

assign and_ln51_fu_398_p2 = (or_ln51_fu_374_p2 & or_ln51_1_fu_392_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign bitcast_ln49_1_fu_145_p1 = e_p2_x;

assign bitcast_ln49_2_fu_428_p1 = p_a_reg_914;

assign bitcast_ln49_3_fu_445_p1 = p_x;

assign bitcast_ln49_4_fu_493_p1 = p_a_1_reg_920;

assign bitcast_ln49_fu_128_p1 = e_p1_x;

assign bitcast_ln50_1_fu_245_p1 = e_p2_y;

assign bitcast_ln50_2_fu_522_p1 = p_a_2_reg_926;

assign bitcast_ln50_3_fu_539_p1 = p_y;

assign bitcast_ln50_fu_228_p1 = e_p1_y;

assign bitcast_ln51_1_fu_345_p1 = e_p2_z;

assign bitcast_ln51_2_fu_587_p1 = p_a_5_reg_944;

assign bitcast_ln51_3_fu_604_p1 = p_z;

assign bitcast_ln51_4_fu_652_p1 = p_a_4_reg_938;

assign bitcast_ln51_5_fu_681_p1 = p_a_3_reg_932;

assign bitcast_ln51_fu_328_p1 = e_p1_z;

assign icmp_ln49_1_fu_168_p2 = ((trunc_ln49_fu_141_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_2_fu_180_p2 = ((tmp_1_fu_148_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln49_3_fu_186_p2 = ((trunc_ln49_1_fu_158_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_4_fu_463_p2 = ((tmp_3_fu_431_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln49_5_fu_469_p2 = ((trunc_ln49_2_fu_441_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_6_fu_475_p2 = ((tmp_4_fu_449_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln49_7_fu_481_p2 = ((trunc_ln49_3_fu_459_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_8_fu_510_p2 = ((tmp_9_fu_496_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln49_9_fu_516_p2 = ((trunc_ln49_4_fu_506_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_162_p2 = ((tmp_fu_131_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln50_1_fu_268_p2 = ((trunc_ln50_fu_241_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_2_fu_280_p2 = ((tmp_7_fu_248_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln50_3_fu_286_p2 = ((trunc_ln50_1_fu_258_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_4_fu_557_p2 = ((tmp_11_fu_525_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln50_5_fu_563_p2 = ((trunc_ln50_2_fu_535_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_6_fu_569_p2 = ((tmp_12_fu_543_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln50_7_fu_575_p2 = ((trunc_ln50_3_fu_553_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_262_p2 = ((tmp_6_fu_231_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln51_10_fu_698_p2 = ((tmp_24_fu_684_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln51_11_fu_704_p2 = ((trunc_ln51_5_fu_694_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln51_1_fu_368_p2 = ((trunc_ln51_fu_341_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln51_2_fu_380_p2 = ((tmp_16_fu_348_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln51_3_fu_386_p2 = ((trunc_ln51_1_fu_358_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln51_4_fu_622_p2 = ((tmp_19_fu_590_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln51_5_fu_628_p2 = ((trunc_ln51_2_fu_600_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln51_6_fu_634_p2 = ((tmp_20_fu_608_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln51_7_fu_640_p2 = ((trunc_ln51_3_fu_618_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln51_8_fu_669_p2 = ((tmp_22_fu_655_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln51_9_fu_675_p2 = ((trunc_ln51_4_fu_665_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_362_p2 = ((tmp_15_fu_331_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln49_1_fu_192_p2 = (icmp_ln49_3_fu_186_p2 | icmp_ln49_2_fu_180_p2);

assign or_ln49_2_fu_710_p2 = (icmp_ln49_5_reg_973 | icmp_ln49_4_reg_968);

assign or_ln49_3_fu_487_p2 = (icmp_ln49_7_fu_481_p2 | icmp_ln49_6_fu_475_p2);

assign or_ln49_4_fu_725_p2 = (icmp_ln49_9_reg_989 | icmp_ln49_8_reg_984);

assign or_ln49_fu_174_p2 = (icmp_ln49_fu_162_p2 | icmp_ln49_1_fu_168_p2);

assign or_ln50_1_fu_292_p2 = (icmp_ln50_3_fu_286_p2 | icmp_ln50_2_fu_280_p2);

assign or_ln50_2_fu_740_p2 = (icmp_ln50_5_reg_999 | icmp_ln50_4_reg_994);

assign or_ln50_3_fu_581_p2 = (icmp_ln50_7_fu_575_p2 | icmp_ln50_6_fu_569_p2);

assign or_ln50_4_fu_788_p2 = (xor_ln49_fu_782_p2 | and_ln50_3_fu_749_p2);

assign or_ln50_5_fu_794_p2 = (xor_ln50_fu_755_p2 | xor_ln49_fu_782_p2);

assign or_ln50_fu_274_p2 = (icmp_ln50_fu_262_p2 | icmp_ln50_1_fu_268_p2);

assign or_ln51_1_fu_392_p2 = (icmp_ln51_3_fu_386_p2 | icmp_ln51_2_fu_380_p2);

assign or_ln51_2_fu_761_p2 = (icmp_ln51_5_reg_1015 | icmp_ln51_4_reg_1010);

assign or_ln51_3_fu_646_p2 = (icmp_ln51_7_fu_640_p2 | icmp_ln51_6_fu_634_p2);

assign or_ln51_4_fu_800_p2 = (icmp_ln51_9_reg_1031 | icmp_ln51_8_reg_1026);

assign or_ln51_5_fu_821_p2 = (icmp_ln51_11_reg_1041 | icmp_ln51_10_reg_1036);

assign or_ln51_6_fu_842_p2 = (or_ln50_5_fu_794_p2 | and_ln51_10_fu_836_p2);

assign or_ln51_fu_374_p2 = (icmp_ln51_fu_362_p2 | icmp_ln51_1_fu_368_p2);

assign p_a_1_fu_222_p3 = ((and_ln49_4_fu_216_p2[0:0] === 1'b1) ? e_p1_x : e_p2_x);

assign p_a_2_fu_310_p3 = ((and_ln50_1_fu_304_p2[0:0] === 1'b1) ? e_p1_y : e_p2_y);

assign p_a_3_fu_322_p3 = ((and_ln50_4_fu_316_p2[0:0] === 1'b1) ? e_p1_y : e_p2_y);

assign p_a_4_fu_410_p3 = ((and_ln51_1_fu_404_p2[0:0] === 1'b1) ? e_p1_z : e_p2_z);

assign p_a_5_fu_422_p3 = ((and_ln51_2_fu_416_p2[0:0] === 1'b1) ? e_p1_z : e_p2_z);

assign p_a_fu_210_p3 = ((and_ln49_1_fu_204_p2[0:0] === 1'b1) ? e_p1_x : e_p2_x);

assign tmp_11_fu_525_p4 = {{bitcast_ln50_2_fu_522_p1[30:23]}};

assign tmp_12_fu_543_p4 = {{bitcast_ln50_3_fu_539_p1[30:23]}};

assign tmp_15_fu_331_p4 = {{bitcast_ln51_fu_328_p1[30:23]}};

assign tmp_16_fu_348_p4 = {{bitcast_ln51_1_fu_345_p1[30:23]}};

assign tmp_19_fu_590_p4 = {{bitcast_ln51_2_fu_587_p1[30:23]}};

assign tmp_1_fu_148_p4 = {{bitcast_ln49_1_fu_145_p1[30:23]}};

assign tmp_20_fu_608_p4 = {{bitcast_ln51_3_fu_604_p1[30:23]}};

assign tmp_22_fu_655_p4 = {{bitcast_ln51_4_fu_652_p1[30:23]}};

assign tmp_24_fu_684_p4 = {{bitcast_ln51_5_fu_681_p1[30:23]}};

assign tmp_3_fu_431_p4 = {{bitcast_ln49_2_fu_428_p1[30:23]}};

assign tmp_4_fu_449_p4 = {{bitcast_ln49_3_fu_445_p1[30:23]}};

assign tmp_6_fu_231_p4 = {{bitcast_ln50_fu_228_p1[30:23]}};

assign tmp_7_fu_248_p4 = {{bitcast_ln50_1_fu_245_p1[30:23]}};

assign tmp_9_fu_496_p4 = {{bitcast_ln49_4_fu_493_p1[30:23]}};

assign tmp_fu_131_p4 = {{bitcast_ln49_fu_128_p1[30:23]}};

assign trunc_ln49_1_fu_158_p1 = bitcast_ln49_1_fu_145_p1[22:0];

assign trunc_ln49_2_fu_441_p1 = bitcast_ln49_2_fu_428_p1[22:0];

assign trunc_ln49_3_fu_459_p1 = bitcast_ln49_3_fu_445_p1[22:0];

assign trunc_ln49_4_fu_506_p1 = bitcast_ln49_4_fu_493_p1[22:0];

assign trunc_ln49_fu_141_p1 = bitcast_ln49_fu_128_p1[22:0];

assign trunc_ln50_1_fu_258_p1 = bitcast_ln50_1_fu_245_p1[22:0];

assign trunc_ln50_2_fu_535_p1 = bitcast_ln50_2_fu_522_p1[22:0];

assign trunc_ln50_3_fu_553_p1 = bitcast_ln50_3_fu_539_p1[22:0];

assign trunc_ln50_fu_241_p1 = bitcast_ln50_fu_228_p1[22:0];

assign trunc_ln51_1_fu_358_p1 = bitcast_ln51_1_fu_345_p1[22:0];

assign trunc_ln51_2_fu_600_p1 = bitcast_ln51_2_fu_587_p1[22:0];

assign trunc_ln51_3_fu_618_p1 = bitcast_ln51_3_fu_604_p1[22:0];

assign trunc_ln51_4_fu_665_p1 = bitcast_ln51_4_fu_652_p1[22:0];

assign trunc_ln51_5_fu_694_p1 = bitcast_ln51_5_fu_681_p1[22:0];

assign trunc_ln51_fu_341_p1 = bitcast_ln51_fu_328_p1[22:0];

assign xor_ln49_fu_782_p2 = (1'd1 ^ and_ln49_7_fu_776_p2);

assign xor_ln50_fu_755_p2 = (1'd1 ^ and_ln50_3_fu_749_p2);

endmodule //pointOnSegment
